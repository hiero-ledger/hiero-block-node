# SPDX-License-Identifier: Apache-2.0
name: solo-e2e-test.yml

on:
  workflow_dispatch:
    inputs:
      block-node-helm-chart-version:
        description: "Block Node Helm Chart Version"
        required: true
        default: "v0.17.0"
      consensus-node-release-tag:
        description: "Consensus Node Release Tag"
        required: true
        default: "v0.65.0-rc.4"
      mirror-node-release-tag:
        description: "Mirror Node Release Tag (for now ignored since using XIN Image)"
        required: true
        default: "v0.137.0"
      solo-network-size:
        description: "Solo Network Size"
        required: true
        default: "1"
      solo-version:
        description: "Solo CLI Version (for now ignored since always using latest)"
        required: false
        default: "latest"

defaults:
  run:
    shell: bash

permissions:
  contents: read
  id-token: write

concurrency:
  group: solo-network
  cancel-in-progress: true

env:
  GRADLE_EXEC: "ionice -c 2 -n 2 nice -n 19 ./gradlew "
  # Solo ENV Hardcoded
  NODE_IDENTIFIERS: "node1"
  DEPLOYMENT: "deployment-network-with-block-node"
  NAMESPACE: "namespace-network-with-block-node"
  CLUSTER_NAME: "solo-cluster"
  CONTEXT: "kind-solo-cluster"
  CLUSTER_REFERENCE: "kind-solo-cluster"

jobs:
  deploy:
    runs-on: hiero-block-node-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # TODO, checkout the same tag as block-node-helm-chart-version
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20

      - name: Install Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          kubectl_version: v1.32.3

      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: "temurin"
          java-version: 21

      # produce protobuf source artifact (for grpcurl later on)
      - name: Produce artifact
        run: ${GRADLE_EXEC} :block-node-protobuf-sources:generateBlockNodeProtoArtifact

      # install solo cli
      - name: Install Solo CLI via npm
        run: |
          npm i @hashgraph/solo@${{ inputs.solo-version }}

      # create kind cluster
      - name: Create Kind Cluster
        run: |
          kind create cluster -n "${CLUSTER_NAME}"
          # wait for control plane
          sleep 10

      # use kubectl context
      - name: Use kubectl context
        run: |
          kubectl config use-context "${CONTEXT}"

      # solo init
      - name: Solo Init
        run: |
          npm run solo -- init

      # solo cluster-ref config connect
      - name: Solo Cluster Ref Config Connect
        run: |
          npm run solo -- cluster-ref config connect --cluster-ref "${CLUSTER_REFERENCE}" --context "${CONTEXT}"

      # solo deployment config create
      - name: Solo Deployment Config Create
        run: |
          npm run solo -- deployment config create --deployment "${DEPLOYMENT}" --namespace "${NAMESPACE}"

      # solo deployment cluster attach
      - name: Solo Deployment Cluster Attach
        run: |
          npm run solo -- deployment cluster attach --deployment "${DEPLOYMENT}" --cluster-ref "${CLUSTER_REFERENCE}" \
          --num-consensus-nodes "${{ inputs.solo-network-size }}"

      - name: Solo Cluster Ref Config Setup
        run: |
          npm run solo -- cluster-ref config setup --cluster-ref "${CLUSTER_REFERENCE}"

      # Solo Block Node Add
      - name: Solo Block Node Add
        run: |
          npm run solo -- block node add --deployment "${DEPLOYMENT}" --release-tag "${{ inputs.consensus-node-release-tag }}" \
          --cluster-ref "${CLUSTER_REFERENCE}" --chart-version "${{ inputs.block-node-helm-chart-version }}"

      - name: Solo Node Keys
        run: |
          npm run solo -- keys consensus generate --gossip-keys --tls-keys --deployment "${DEPLOYMENT}" \
          --node-aliases "${NODE_IDENTIFIERS}"

      - name: Solo Network Deploy
        run: |
          npm run solo -- consensus network deploy --deployment "${DEPLOYMENT}" --pvcs true --node-aliases "${NODE_IDENTIFIERS}" --release-tag "${{ inputs.consensus-node-release-tag }}"

      - name: Solo Node Setup
        run: |
          npm run solo -- consensus node setup --node-aliases "${NODE_IDENTIFIERS}" --deployment "${DEPLOYMENT}" --release-tag "${{ inputs.consensus-node-release-tag }}"

      - name: Solo Node Start
        run: |
          npm run solo -- consensus node start --deployment "${DEPLOYMENT}" --node-aliases "${NODE_IDENTIFIERS}"

      # Create Mirror Values Override File (uses BN service)
      - name: Create Mirror Values Override File
        run: |
          cat <<EOF > mirror-bn-values.yaml
          importer:
            image:
              registry: docker.io
              repository: xinatswirlds/importer
              tag: e741ea2b2
            config:
              hiero:
                mirror:
                  importer:
                    block:
                      enabled: true
                      nodes:
                        - host: block-node-0.${NAMESPACE}.svc.cluster.local
                          port: 40840
                      sourceType: BLOCK_NODE
                  downloader:
                    record:
                      enabled: false
                  startDate: 1970-01-01T00:00:00Z
                  stream:
                    maxSubscribeAttempts: 10
                    responseTimeout: 10s
          EOF

      - name: Verify Mirror Values Override File Created
        run: |
          cat mirror-bn-values.yaml

      - name: Solo Mirror Node Add
        run: |
          npm run solo -- mirror node add --deployment "${DEPLOYMENT}" --pinger --cluster-ref "${CLUSTER_REFERENCE}" --enable-ingress -f mirror-bn-values.yaml

      - name: Solo Relay Node Add
        run: |
          npm run solo -- relay node add --deployment "${DEPLOYMENT}" --node-alias "${NODE_IDENTIFIERS}" --cluster-ref "${CLUSTER_REFERENCE}"

      - name: Solo Explorer Node Add
        run: |
          npm run solo -- explorer node add --deployment "${DEPLOYMENT}" --cluster-ref "${CLUSTER_REFERENCE}"

      # ---- BN verification with grpcurl ----

      - name: Install grpcurl
        run: |
          curl -L https://github.com/fullstorydev/grpcurl/releases/download/v1.8.7/grpcurl_1.8.7_linux_x86_64.tar.gz -o grpcurl.tar.gz
          sudo tar -xzf grpcurl.tar.gz -C /usr/local/bin grpcurl
          rm grpcurl.tar.gz

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Port Forward to Block Node
        run: |
          kubectl port-forward --namespace "${NAMESPACE}" svc/block-node-0 40840:40840 &
          echo $! > /tmp/pf.pid
          # wait for port-forward to be established
          sleep 10

      - name: Get lastAvailableBlock
        run: |
          BLOCK=$(grpcurl \
            -plaintext \
            -import-path protobuf-sources/src/main/proto \
            -import-path protobuf-sources/block-node-protobuf \
            -proto block-node/api/node_service.proto \
            -d '{}' \
            localhost:40840 \
            org.hiero.block.api.BlockNodeService/serverStatus \
            | jq -r '.lastAvailableBlock')
          echo "Block is $BLOCK"
          echo "BLOCK=$BLOCK" >> $GITHUB_ENV

      # TODO verify MN using curl and REST API
