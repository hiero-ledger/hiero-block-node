# SPDX-License-Identifier: Apache-2.0

# Log Level Values
#
# SEVERE: indicates a critical error or failure
# WARNING: warns of potential issues or errors
# INFO: reports normal operational information
# CONFIG: provides configuration-related information
# FINE: provides detailed debugging information
# FINER: provides finer-grained debugging information
# FINEST: provides the most detailed debugging information

# Set the default logging level
# Available Levels are (from most verbose to least verbose):
# ALL FINEST FINER FINE CONFIG INFO WARNING SEVERE OFF
.level=INFO

# Helidon loggers
io.helidon.webserver.level=INFO
io.helidon.config.level=SEVERE
io.helidon.security.level=INFO
io.helidon.common.level=INFO

# Configure the app log level
#org.hiero.block.level=FINE
#org.hiero.block.server.level=FINE

# Configure the configuration logging - OFF will suppress all configuration logging
#org.hiero.block.server.config.logging.ConfigurationLoggingImpl.level=OFF

# Configure specific Block Node loggers
#org.hiero.block.server.producer.ProducerBlockItemObserver.level=FINE
#org.hiero.block.server.mediator.LiveStreamMediatorImpl.level=FINE
#org.hiero.block.server.mediator.LiveStreamPoller.level=FINE
#org.hiero.block.server.consumer.level=FINE
#org.hiero.block.server.pbj.PbjBlockStreamServiceProxy.level=FINE

# Configure specific Block Node Consumer loggers
#org.hiero.block.server.consumer.ConsumerStreamResponseObserver.level=FINE
#org.hiero.block.server.consumer.HistoricBlockStreamSupplier.level=FINE

# Configure specific stream service loggers
#org.hiero.block.server.pbj.PbjBlockStreamServiceProxy.level=FINE
#org.hiero.block.server.persistence.StreamPersistenceHandlerImpl.level=FINE
#org.hiero.block.server.persistence.storage.write.level=FINE
#org.hiero.block.server.persistence.storage.archive.LocalGroupZipArchiveTask.level=FINE

# Helidon PBJ Plugin loggers
#org.hiero.pbj.grpc.helidon.PbjProtocolHandler.level=FINE

################################################################################
# Handlers configuration
################################################################################
handlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler

################################################################################
# ConsoleHandler configuration
################################################################################
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

################################################################################
# FileHandler properties
################################################################################
# The pattern for the output file name.
java.util.logging.FileHandler.pattern = /app/logs/blocknode-%g.log
# Set append to true if you want to keep appending to existing files
java.util.logging.FileHandler.append = true
# The limit in bytes before a new file is started.
# e.g., 5,000,000 bytes ~= 5MB
java.util.logging.FileHandler.limit = 5_000_000
# Number of log files to cycle through.
# If count is 5, you end up with:
#  myapp-0.log ... myapp-4.log
# Then it cycles back over the oldest.
java.util.logging.FileHandler.count = 5
# Log level for the FileHandler
java.util.logging.FileHandler.level = ALL
# Use your SimpleFormatter, or a custom format
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

################################################################################
# SimpleFormatter single-line format configuration
################################################################################
# The format syntax uses java.util.Formatter.
# The parameters are:
#   %1$ - date/time (java.util.Date)
#   %2$ - source (usually class and method)
#   %3$ - logger name
#   %4$ - log level
#   %5$ - log message
#   %6$ - throwable trace
#
# Example to produce a line such as:
# 2025-02-25 21:07:36.281+0000 INFO    [org.hiero.block.server.Server main] Starting BlockNode Server
# 21:07:36.281+0000 - Indicates UTC time since there's no offset
# Log level is padded to 7 chars
java.util.logging.SimpleFormatter.format = %TF %<TT.%<TL%<Tz %4$-7s [%2$s] %5$s%6$s%n
